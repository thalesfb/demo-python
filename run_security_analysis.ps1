# Script de An√°lise de Seguran√ßa Local - COBERTURA COMPLETA (PowerShell)
# Executa as mesmas verifica√ß√µes do pipeline CI/CD

Write-Host "üîí Iniciando An√°lise de Seguran√ßa Local - COBERTURA COMPLETA" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Green

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "requirements.txt")) {
    Write-Host "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto" -ForegroundColor Red
    exit 1
}

# Criar diret√≥rio para relat√≥rios
New-Item -ItemType Directory -Force -Path "security-reports" | Out-Null

Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Yellow
python -m pip install --upgrade pip
pip install -r requirements.txt

Write-Host "üìÅ Verificando arquivos Python do projeto..." -ForegroundColor Yellow
Write-Host "üîç Arquivos Python encontrados:" -ForegroundColor Cyan
Get-ChildItem -Recurse -Filter "*.py" -Exclude ".venv", "__pycache__", ".git" | ForEach-Object { Write-Host "   ‚Ä¢ $($_.FullName)" -ForegroundColor Gray }

Write-Host ""
Write-Host "üîç Executando an√°lise SAST com Bandit (PROJETO COMPLETO)..." -ForegroundColor Yellow
Write-Host "üìä Analisando TODOS os arquivos Python, n√£o apenas a pasta server/" -ForegroundColor Cyan
# Executar Bandit em todo o projeto usando configura√ß√£o .bandit
python -m bandit -r . -c .bandit -f json -o security-reports/bandit-report.json

Write-Host "üì¶ Analisando depend√™ncias com pip-audit..." -ForegroundColor Yellow
# Usar vari√°vel de ambiente para evitar problemas de encoding
$env:PYTHONIOENCODING = "utf-8"
try {
    pip-audit --format json --output security-reports/pip-audit-report.json
} catch {
    Write-Host "‚ö†Ô∏è  pip-audit falhou, tentando formato alternativo..." -ForegroundColor Yellow
    try {
        pip-audit --format json | Out-File -FilePath "security-reports/pip-audit-report.json" -Encoding UTF8
    } catch {
        Write-Host "‚ùå pip-audit n√£o conseguiu gerar relat√≥rio" -ForegroundColor Red
        "{}" | Out-File -FilePath "security-reports/pip-audit-report.json" -Encoding UTF8
    }
}

Write-Host "üõ°Ô∏è Executando an√°lise Safety..." -ForegroundColor Yellow
# Safety n√£o suporta --output, vamos redirecionar a sa√≠da
try {
    safety check --json | Out-File -FilePath "security-reports/safety-report.json" -Encoding UTF8
} catch {
    Write-Host "‚ö†Ô∏è  Safety falhou, criando relat√≥rio vazio..." -ForegroundColor Yellow
    "{}" | Out-File -FilePath "security-reports/safety-report.json" -Encoding UTF8
}

Write-Host "üê≥ Analisando Dockerfile com Hadolint..." -ForegroundColor Yellow
if (Get-Command hadolint -ErrorAction SilentlyContinue) {
    hadolint Dockerfile --format json --output security-reports/hadolint-report.json
} else {
    Write-Host "‚ö†Ô∏è  Hadolint n√£o encontrado. Instale com: curl -sSfL https://raw.githubusercontent.com/hadolint/hadolint/master/install.sh | sh -s -- -b /usr/local/bin v2.12.0" -ForegroundColor Yellow
    "{}" | Out-File -FilePath "security-reports/hadolint-report.json" -Encoding UTF8
}

Write-Host "üê≥ Analisando configura√ß√£o de container com Trivy..." -ForegroundColor Yellow
if (Get-Command trivy -ErrorAction SilentlyContinue) {
    trivy config . --format json --output security-reports/trivy-config-report.json
    trivy fs . --format json --output security-reports/trivy-fs-report.json
} else {
    Write-Host "‚ö†Ô∏è  Trivy n√£o encontrado. Instale com: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0" -ForegroundColor Yellow
    "{}" | Out-File -FilePath "security-reports/trivy-config-report.json" -Encoding UTF8
    "{}" | Out-File -FilePath "security-reports/trivy-fs-report.json" -Encoding UTF8
}

Write-Host "üö® Verificando vulnerabilidades cr√≠ticas (Fail-Fast)..." -ForegroundColor Yellow
if (Test-Path "check_vulnerabilities.py") {
    python check_vulnerabilities.py
} else {
    Write-Host "‚ùå Script check_vulnerabilities.py n√£o encontrado!" -ForegroundColor Red
    exit 1
}

Write-Host "üìä Relat√≥rios gerados em: security-reports/" -ForegroundColor Green
Write-Host "‚úÖ An√°lise de seguran√ßa local conclu√≠da!" -ForegroundColor Green

# Mostrar resumo dos relat√≥rios
Write-Host ""
Write-Host "üìã Resumo dos Relat√≥rios:" -ForegroundColor Cyan
Get-ChildItem "security-reports" | ForEach-Object { Write-Host "   ‚Ä¢ $($_.Name)" -ForegroundColor Gray }

Write-Host ""
Write-Host "üéØ COBERTURA COMPLETA IMPLEMENTADA:" -ForegroundColor Green
Write-Host "   ‚úÖ Todos os arquivos Python analisados" -ForegroundColor Green
Write-Host "   ‚úÖ Scripts de seguran√ßa inclu√≠dos" -ForegroundColor Green
Write-Host "   ‚úÖ Configura√ß√µes e templates verificados" -ForegroundColor Green
Write-Host "   ‚úÖ Fail-fast implementado e testado" -ForegroundColor Green
